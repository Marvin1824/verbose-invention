---
date: '2021-07-14'
sections:
  security_fixes:
    - '**HIGH:** A path traversal vulnerability was identified in GitHub Enterprise Server that could be exploited when building a GitHub Pages site. User-controlled configuration options used by GitHub Pages were not sufficiently restricted and made it possible to read files on the GitHub Enterprise Server instance. To exploit this vulnerability, an attacker would need permission to create and build a GitHub Pages site on the GitHub Enterprise Server instance. This vulnerability affected all versions of GitHub Enterprise Server prior to 3.1.3 and has been assigned CVE-2021-22867. This vulnerability was reported via the GitHub Bug Bounty program.'
    - パッケージは最新のセキュリティバージョンにアップデートされました。
  bugs:
    - '`ghe-cluster-config-node-init` would fail during cluster setup if HTTP proxy is enabled.'
    - Collectd would not resolve the forwarding destination hostname after the initial startup.
    - The job that purged stale deleted repositories could fail to make progress if some of those repositories were protected from deletion by legal holds.
    - Git pushes could result in a 500 Internal Server Error during the user reconciliation process on instances using LDAP authentication mode.
    - A significant number of 503 errors were logged every time a user visited a repository's `/settings` page if the dependency graph was not enabled.
  changes:
    - Improved the efficiency of config apply by skipping IP allow firewall rules that had not changed, which saved significant time on large clusters.
  known_issues:
    - 新しくセットアップされたユーザを持たないGitHub Enterprise Serverで、攻撃者が最初の管理ユーザを作成できました。
    - アップグレードの過程で、カスタムのファイアウォールのルールが削除されます。
    - Git LFSが追跡するファイル[Webインターフェースからアップロードされたもの](https://github.com/blog/2105-upload-files-to-your-repositories)が、不正にリポジトリに直接追加されてしまいます。
    - 同じリポジトリ内のファイルパスが255文字を超えるblobへのパーマリンクを含むIssueをクローズできませんでした。
    - GitHub Connectで"Users can search GitHub.com"が有効化されている場合、GitHub.comの検索結果にプライベート及びインターナルリポジトリのIssueが含まれません。
    - High Availability構成でレプリカノードがオフラインの場合でも、{% data variables.product.product_name %}が{% data variables.product.prodname_pages %}リクエストをオフラインのノードにルーティングし続ける場合があり、それによってユーザにとっての{% data variables.product.prodname_pages %}の可用性が下がってしまいます。
